name: CI
on: [push, pull_request]

jobs:
  windows:
    runs-on: windows-latest
    env:
      PACKAGENAME: Real-ESRGAN-Vulkan-SourceBook-windows
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: cache-vulkansdk
      id: cache-vulkansdk
      uses: actions/cache@v1
      with:
        path: "VulkanSDK"
        key: VulkanSDK-1.3.239.0-Installer
    - name: vulkansdk
      if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest -Uri https://sdk.lunarg.com/sdk/download/1.3.239.0/windows/VulkanSDK-1.3.239.0-Installer.exe?Human=true -OutFile VulkanSDK-1.3.239.0-Installer.exe
        7z x -aoa ./VulkanSDK-1.3.239.0-Installer.exe -oVulkanSDK
        Remove-Item .\VulkanSDK\Demos, .\VulkanSDK\Samples, .\VulkanSDK\Third-Party, .\VulkanSDK\Tools, .\VulkanSDK\Tools32, .\VulkanSDK\Bin32, .\VulkanSDK\Lib32 -Recurse
    - name: build
      run: |
        $env:VULKAN_SDK="$(pwd)/VulkanSDK"
        mkdir build; cd build
        cmake -A x64 ../src
        cmake --build . --config Release -j 2
    - name: package
      # Copy-Item -Verbose -Recurse -Path "models\*" -Destination "${{ env.PACKAGENAME }}"
      run: |
        mkdir ${{ env.PACKAGENAME }}
        Copy-Item -Verbose -Path "README.md" -Destination "${{ env.PACKAGENAME }}"
        Copy-Item -Verbose -Path "LICENSE" -Destination "${{ env.PACKAGENAME }}"
        Copy-Item -Verbose -Path "build\Release\*.exe" -Destination "${{ env.PACKAGENAME }}"
        Copy-Item -Verbose -Path "C:\windows\system32\vcomp140.dll" -Destination "${{ env.PACKAGENAME }}"
        Copy-Item -Verbose -Path "C:\windows\system32\vcomp140d.dll" -Destination "${{ env.PACKAGENAME }}"
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip


  ubuntu:
    runs-on: ubuntu-latest
    env:
      PACKAGENAME: Real-ESRGAN-Vulkan-SourceBook-Ubuntu
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: cache-vulkansdk
      id: cache-vulkansdk
      uses: actions/cache@v1
      with:
        path: "1.3.239.0"
        key: vulkansdk-linux-x86_64-1.3.239.0
    - name: vulkansdk
      if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
      run: |
        wget https://sdk.lunarg.com/sdk/download/1.3.239.0/linux/vulkansdk-linux-x86_64-1.3.239.0.tar.gz?Human=true -O vulkansdk-linux-x86_64-1.3.239.0.tar.gz
        tar -xf vulkansdk-linux-x86_64-1.3.239.0.tar.gz
        rm -rf 1.3.239.0/source 1.3.239.0/samples
        find 1.3.239.0 -type f | grep -v -E 'vulkan|glslang' | xargs rm
    - name: build
      run: |
        export VULKAN_SDK=`pwd`/1.3.239.0/x86_64
        mkdir build && cd build
        cmake ../src
        cmake --build . -j 2
    - name: package
      # cp -r models/* ${{ env.PACKAGENAME }}
      run: |
        ls build
        mkdir -p ${{ env.PACKAGENAME }}
        cp README.md LICENSE ${{ env.PACKAGENAME }}
        cp build/realesrgan-ncnn-vulkan ${{ env.PACKAGENAME }}
        strip -g ${{ env.PACKAGENAME }}/realesrgan-ncnn-vulkan
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  macos:
    runs-on: macos-latest
    env:
      DEVELOPER_DIR: /Applications/Xcode_12.4.app/Contents/Developer
      PACKAGENAME: Real-ESRGAN-Vulkan-SourceBook-Mac
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: cache-vulkansdk
      id: cache-vulkansdk
      uses: actions/cache@v1
      with:
        path: "vulkansdk-macos-1.3.239.0"
        key: vulkansdk-macos-1.3.239.0
    - name: vulkansdk
      if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
      run: |
        wget https://sdk.lunarg.com/sdk/download/1.3.239.0/mac/vulkansdk-macos-1.3.239.0.dmg?Human=true -O vulkansdk-macos-1.3.239.0.dmg
        hdiutil attach vulkansdk-macos-1.3.239.0.dmg
        cp -r /Volumes/vulkansdk-macos-1.3.239.0 .
        rm -rf vulkansdk-macos-1.3.239.0/Applications
        find vulkansdk-macos-1.3.239.0 -type f | grep -v -E 'vulkan|glslang|MoltenVK' | xargs rm
        hdiutil detach /Volumes/vulkansdk-macos-1.3.239.0
    - name: build-x86_64
      run: |
        export VULKAN_SDK=`pwd`/vulkansdk-macos-1.3.239.0/macOS
        mkdir build-x86_64 && cd build-x86_64
        cmake -DUSE_STATIC_MOLTENVK=ON -DCMAKE_OSX_ARCHITECTURES="x86_64" \
            -DVulkan_INCLUDE_DIR=`pwd`/../vulkansdk-macos-1.3.239.0/MoltenVK/include \
            -DVulkan_LIBRARY=`pwd`/../vulkansdk-macos-1.3.239.0/MoltenVK/MoltenVK.xcframework/macos-arm64_x86_64/libMoltenVK.a \
            ../src
        cmake --build . -j 3
    - name: build-arm64
      run: |
        export VULKAN_SDK=`pwd`/vulkansdk-macos-1.3.239.0/macOS
        mkdir build-arm64 && cd build-arm64
        cmake -DUSE_STATIC_MOLTENVK=ON -DCMAKE_OSX_ARCHITECTURES="arm64" \
            -DVulkan_INCLUDE_DIR=`pwd`/../vulkansdk-macos-1.3.239.0/MoltenVK/include \
            -DVulkan_LIBRARY=`pwd`/../vulkansdk-macos-1.3.239.0/MoltenVK/MoltenVK.xcframework/macos-arm64_x86_64/libMoltenVK.a \
            ../src
        cmake --build . -j 3
    - name: package
      # cp -r models/* ${{ env.PACKAGENAME }}
      run: |
        ls build-x86_64
        mkdir -p ${{ env.PACKAGENAME }}
        cp README.md LICENSE ${{ env.PACKAGENAME }}
        lipo -create build-x86_64/realesrgan-ncnn-vulkan build-arm64/realesrgan-ncnn-vulkan -o ${{ env.PACKAGENAME }}/realesrgan-ncnn-vulkan
        strip ${{ env.PACKAGENAME }}/realesrgan-ncnn-vulkan
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip
